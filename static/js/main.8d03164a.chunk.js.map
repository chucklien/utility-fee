{"version":3,"sources":["assets/gas.png","assets/water.png","assets/electricity.png","components/Header/Header.js","utils/getThisPeriodFee.js","assets/public.png","assets/clear.png","components/CalculatForm/CalculatForm.js","utils/template.js","components/Main/Main.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","classes","className","AppBar","position","color","Toolbar","Typography","variant","src","electricityImage","alt","gasImage","waterImage","getThisPeriodFee","curry","lastElectricMeter","currentElectricMeter","periodElectrickWh","electricFee","publicElectricFee","gasFee","waterFee","eleFeePerkwh","Number","usedEle","subEleFee","eleFee","gasAndWaterFee","total","toFixed","applyToSpacing","value","compose","when","is","Function","applyTo","path","useStyles","makeStyles","applySpec","alignItems","always","padding","textField","marginLeft","marginRight","marginBottom","halfTextField","width","button","marginTop","clearButton","CalculatForm","onCalculated","React","utilityMeta","setUtilityMeta","onFieldChange","event","prev","target","name","autoComplete","onSubmit","preventDefault","result","data","template","navigator","clipboard","writeText","IconButton","aria-label","clearImage","TextField","required","label","fullWidth","helperText","placeholder","InputLabelProps","shrink","onChange","align","InputProps","startAdornment","InputAdornment","publicImage","Button","type","theme","createMuiTheme","palette","Main","setResult","ThemeProvider","CssBaseline","gutterBottom","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d03164a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gas.8bb90894.png\";","export default __webpack_public_path__ + \"static/media/water.b08d8c2e.png\";","export default __webpack_public_path__ + \"static/media/electricity.2a143a0c.png\";","// @format\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport gasImage from 'assets/gas.png';\nimport waterImage from 'assets/water.png';\nimport electricityImage from 'assets/electricity.png';\nimport './Header.css';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n};\n\nconst Header = ({ classes }) => (\n  <div className={classes.root}>\n    <AppBar position=\"static\" color=\"inherit\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\">\n          Utility Fee Caculator\n        </Typography>\n        <div className=\"Header-icons\">\n          <img className=\"Header-icons-gas\" src={electricityImage} alt=\"flash\" />\n          <img className=\"Header-icons-gas\" src={gasImage} alt=\"gas\" />\n          <img className=\"Header-icons-gas\" src={waterImage} alt=\"water drop\" />\n        </div>\n      </Toolbar>\n    </AppBar>\n  </div>\n);\n\nHeader.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Header);\n","// @format\nimport { curry } from 'ramda';\n\nexport const getThisPeriodFee = curry(\n  (\n    lastElectricMeter,\n    currentElectricMeter,\n    periodElectrickWh,\n    electricFee,\n    publicElectricFee,\n    gasFee,\n    waterFee,\n  ) => {\n    const eleFeePerkwh = Number(electricFee) / Number(periodElectrickWh);\n    const usedEle = Number(currentElectricMeter) - Number(lastElectricMeter);\n    const subEleFee = eleFeePerkwh * usedEle;\n    const eleFee = subEleFee + publicElectricFee / 2;\n    const gasAndWaterFee = (Number(gasFee) + Number(waterFee)) / 2;\n    return {\n      total: (eleFee + gasAndWaterFee).toFixed(2),\n      subEleFee,\n      eleFee,\n      eleFeePerkwh,\n      usedEle,\n      gasAndWaterFee,\n    };\n  },\n);\n","export default __webpack_public_path__ + \"static/media/public.befbdff1.png\";","export default __webpack_public_path__ + \"static/media/clear.0aa8d250.png\";","// @format\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport { is, compose, applySpec, always, path, when, applyTo } from 'ramda';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nimport { getThisPeriodFee } from 'utils/getThisPeriodFee';\nimport publicImage from 'assets/public.png';\nimport gasImage from 'assets/gas.png';\nimport waterImage from 'assets/water.png';\nimport electricityImage from 'assets/electricity.png';\nimport clearImage from 'assets/clear.png';\nimport { outputTemplate } from 'utils/template';\nimport './CalculatForm.css';\n\nconst applyToSpacing = value =>\n  compose(\n    when(is(Function), applyTo(value)),\n    path(['spacing']),\n  );\n\nconst useStyles = makeStyles(\n  applySpec({\n    root: applySpec({\n      alignItems: always('stretch'),\n      flexGrow: always(1),\n      padding: applyToSpacing(2),\n    }),\n    textField: {\n      marginLeft: applyToSpacing(1),\n      marginRight: applyToSpacing(1),\n      marginBottom: applyToSpacing(1),\n    },\n    halfTextField: {\n      marginLeft: applyToSpacing(1),\n      marginRight: applyToSpacing(1),\n      marginBottom: applyToSpacing(1),\n      width: always('15ch'),\n    },\n    button: {\n      marginTop: applyToSpacing(2),\n    },\n    clearButton: {\n      marginLeft: always('auto'),\n    },\n  }),\n);\nconst CalculatForm = ({ onCalculated }) => {\n  const classes = useStyles();\n  const [utilityMeta, setUtilityMeta] = React.useState({\n    lastElectricMeter: '',\n    currentElectricMeter: '',\n    periodElectrickWh: '',\n    electricFee: '',\n    publicElectricFee: '',\n    gasFee: '',\n    waterFee: '',\n  });\n\n  const onFieldChange = event => {\n    setUtilityMeta(prev => ({\n      ...prev,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const {\n      lastElectricMeter,\n      currentElectricMeter,\n      periodElectrickWh,\n      electricFee,\n      publicElectricFee,\n      gasFee,\n      waterFee,\n    } = utilityMeta;\n    const result = getThisPeriodFee(\n      lastElectricMeter,\n      currentElectricMeter,\n      periodElectrickWh,\n      electricFee,\n      publicElectricFee,\n      gasFee,\n      waterFee,\n    );\n    onCalculated(result);\n    const template = outputTemplate({\n      currentElectricMeter,\n      lastElectricMeter,\n      electricFee,\n      periodElectrickWh,\n      publicElectricFee,\n      gasFee,\n      waterFee,\n      ...result,\n    });\n    navigator.clipboard.writeText(template);\n  };\n\n  return (\n    <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit}>\n      <div className=\"Form-electricity-meters-title\">\n        <img src={electricityImage} alt=\"flash\" />\n        <Typography variant=\"h5\">meters</Typography>\n        <IconButton className={classes.clearButton} aria-label=\"clear\" color=\"primary\">\n          <img className=\"Form-clear\" alt=\"claer\" src={clearImage} />\n        </IconButton>\n      </div>\n      <TextField\n        required\n        className={classes.textField}\n        label=\"Previous\"\n        fullWidth\n        name=\"lastElectricMeter\"\n        value={utilityMeta['lastElectricMeter']}\n        helperText=\"Previous electricity meters\"\n        placeholder=\"1234\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onFieldChange}\n      />\n      <TextField\n        required\n        className={classes.textField}\n        label=\"Current\"\n        fullWidth\n        name=\"currentElectricMeter\"\n        value={utilityMeta['currentElectricMeter']}\n        helperText=\"Current electricity meters\"\n        placeholder=\"1234\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onFieldChange}\n      />\n      <TextField\n        required\n        className={classes.textField}\n        label=\"Usage\"\n        fullWidth\n        name=\"periodElectrickWh\"\n        value={utilityMeta['periodElectrickWh']}\n        helperText=\"Electricity usage\"\n        placeholder=\"1234\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        onChange={onFieldChange}\n      />\n      <div className=\"Form-divider\" />\n      <Typography variant=\"h5\" align=\"left\">\n        Current Fee\n      </Typography>\n      <TextField\n        required\n        className={classes.halfTextField}\n        label=\"Electricity\"\n        placeholder=\"1234\"\n        name=\"electricFee\"\n        value={utilityMeta['electricFee']}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <img className=\"Input-adornment-icon\" src={electricityImage} alt=\"flash\" />\n            </InputAdornment>\n          ),\n        }}\n        onChange={onFieldChange}\n      />\n      <TextField\n        required\n        className={classes.halfTextField}\n        label=\"Public fee\"\n        placeholder=\"1234\"\n        name=\"publicElectricFee\"\n        value={utilityMeta['publicElectricFee']}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <img className=\"Input-adornment-icon\" src={publicImage} alt=\"earth\" />\n            </InputAdornment>\n          ),\n        }}\n        onChange={onFieldChange}\n      />\n      <TextField\n        required\n        className={classes.textField}\n        label=\"Water\"\n        fullWidth\n        name=\"waterFee\"\n        value={utilityMeta['waterFee']}\n        helperText=\"Water fee\"\n        placeholder=\"1234\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <img className=\"Input-adornment-icon\" src={waterImage} alt=\"water\" />\n            </InputAdornment>\n          ),\n        }}\n        onChange={onFieldChange}\n      />\n      <TextField\n        required\n        className={classes.textField}\n        label=\"Gas\"\n        fullWidth\n        name=\"gasFee\"\n        value={utilityMeta['gasFee']}\n        helperText=\"Gas fee\"\n        placeholder=\"1234\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <img className=\"Input-adornment-icon\" src={gasImage} alt=\"gas\" />\n            </InputAdornment>\n          ),\n        }}\n        onChange={onFieldChange}\n      />\n      <Button\n        className={classes.button}\n        fullWidth\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Calculate\n      </Button>\n    </form>\n  );\n};\n\nCalculatForm.propTypes = {\n  onCalculated: PropTypes.func,\n};\n\nexport default CalculatForm;\n","export const outputTemplate = data => `\n#五樓用電度數 (${data?.currentElectricMeter}-上期${data?.lastElectricMeter}=${data?.usedEle}度)\n------------------------------\n流動電費$${data?.electricFee}\n/總用度數${data?.periodElectrickWh}度\n——————————————\n每度約$${data?.eleFeePerkwh}\n*五樓用度數${data?.usedEle}度\n——————————————\n小計$${data?.subEleFee}\n+）分攤公共電費（$${data?.publicElectricFee}/2）\n——————————————\nTotal電費 $${data?.eleFee}\n\n瓦斯費加水費(${data?.gasFee}+${data?.waterFee})/2=${data?.gasAndWaterFee}\nTotal=${data?.total}\n`;\n","// @format\nimport * as React from 'react';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { CssBaseline, createMuiTheme } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nimport Header from 'components/Header';\nimport CalculatForm from 'components/CalculatForm';\nimport './Main.css';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n  },\n});\n\nconst Main = () => {\n  const [result, setResult] = React.useState();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"Main\">\n        <Header />\n        <CalculatForm onCalculated={setResult} />\n        <Typography variant=\"subtitle2\" gutterBottom>\n          {result?.total}\n        </Typography>\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from 'components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}